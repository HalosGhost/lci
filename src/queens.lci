
# queens.lci
#
# Implementation of n-queens problem.
# Experimental use of ~ operator to use call-by-value.
#
# Usage: queens <no>
# Gives all solutions (in reasonable time) for up to 5 queens.


Queens = \qno.
	Qu qno ~ 1..qno;


# Qu is the main function
# m is the number of queens and qlist a list of values
# Qu calls Qu m-1 and combines the result with the values
# for the m queen. Then it filters the result to keep only
# those combinations that are safe.

Qu = \m.\qlist.
	If (IsZero m)
		Nil:Nil
		(Map
			(\p.Append ~ (Fst p) ~ (Snd p):Nil)
			~ (Filter
				(\p.Safe ~ (Fst p) ~ (Snd p) m)
				~ (Combine
					~ (Qu ~ (Pred m) qlist)
					qlist
				)
			)
		);


# Safe: checks if value n of queen m is compatible with
# the values of other queens stored in list p

Safe = \p.\n.\m.
	All Not
		(Map
		 	(\p.Check ~ (Fst p) ~ (Snd p) m n)
			~ (Zip ~ (1..(Length p)) p) #
		);


# Check: returns true if queen i (value j) threatens queen m (value n)

Check = \i.\j.\m.\n.
	j   == n		||
	i+j == m+n	||
	i+n == m+j;
